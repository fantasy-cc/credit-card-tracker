generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "rhel-openssl-1.0.x", "rhel-openssl-3.0.x"]
  engineType    = "library"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String           @id @default(cuid())
  name                    String?
  email                   String           @unique
  emailVerified           DateTime?
  image                   String?
  notifyNewBenefit        Boolean          @default(false)
  notifyBenefitExpiration Boolean          @default(false)
  notifyExpirationDays    Int              @default(7)
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
  notifyPointsExpiration  Boolean?         @default(true)
  pointsExpirationDays    Int?             @default(30)
  role                    UserRole         @default(USER)
  accounts                Account[]
  benefitStatuses         BenefitStatus[]
  creditCards             CreditCard[]
  loyaltyAccounts         LoyaltyAccount[]
  sessions                Session[]
  createdSuggestions      CatalogSuggestion[] @relation("UserCreatedSuggestions")
  reviewedSuggestions     CatalogSuggestion[] @relation("UserReviewedSuggestions")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CreditCard {
  id             String    @id @default(cuid())
  name           String
  issuer         String
  cardNumber     String?
  expiryDate     DateTime?
  openedDate     DateTime?
  userId         String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  lastFourDigits String?
  benefits       Benefit[]
  user           User      @relation(fields: [userId], references: [id])
}

model Benefit {
  id                       String                 @id @default(cuid())
  category                 String
  description              String
  percentage               Float
  maxAmount                Float?
  startDate                DateTime
  endDate                  DateTime?
  frequency                BenefitFrequency       @default(ONE_TIME)
  creditCardId             String
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt
  cycleAlignment           BenefitCycleAlignment? @default(CARD_ANNIVERSARY)
  fixedCycleDurationMonths Int?
  fixedCycleStartMonth     Int?
  occurrencesInCycle       Int                    @default(1)
  creditCard               CreditCard             @relation(fields: [creditCardId], references: [id], onDelete: Cascade)
  benefitStatuses          BenefitStatus[]
}

model PredefinedCard {
  id        String              @id @default(cuid())
  name      String              @unique
  issuer    String
  annualFee Float
  imageUrl  String?
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  benefits  PredefinedBenefit[]
}

model PredefinedBenefit {
  id                       String                 @id @default(cuid())
  category                 String
  description              String
  percentage               Float
  maxAmount                Float?
  frequency                BenefitFrequency       @default(ONE_TIME)
  predefinedCardId         String
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt
  cycleAlignment           BenefitCycleAlignment? @default(CARD_ANNIVERSARY)
  fixedCycleDurationMonths Int?
  fixedCycleStartMonth     Int?
  occurrencesInCycle       Int                    @default(1)
  usageWayId               String?
  predefinedCard           PredefinedCard         @relation(fields: [predefinedCardId], references: [id])
  usageWay                 BenefitUsageWay?       @relation(fields: [usageWayId], references: [id])
}

model BenefitUsageWay {
  id                 String              @id @default(cuid())
  title              String
  slug               String              @unique
  description        String?
  content            String
  category           String?
  tips               String[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  predefinedBenefits PredefinedBenefit[]
}

model BenefitStatus {
  id             String    @id @default(cuid())
  benefitId      String
  userId         String
  cycleStartDate DateTime
  cycleEndDate   DateTime
  isCompleted    Boolean   @default(false)
  completedAt    DateTime?
  isNotUsable    Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  orderIndex     Int?
  occurrenceIndex Int      @default(0)
  benefit        Benefit   @relation(fields: [benefitId], references: [id], onDelete: Cascade)
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([benefitId, userId, cycleStartDate, occurrenceIndex])
}

model playing_with_neon {
  id    Int    @id @default(autoincrement())
  name  String
  value Float? @db.Real
}

model LoyaltyProgram {
  id                   String             @id @default(cuid())
  name                 String             @unique
  displayName          String
  type                 LoyaltyProgramType
  company              String
  expirationMonths     Int?
  hasExpiration        Boolean            @default(true)
  website              String?
  logoUrl              String?
  description          String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  qualifyingActivities String?
  userAccounts         LoyaltyAccount[]
}

model LoyaltyAccount {
  id               String         @id @default(cuid())
  userId           String
  loyaltyProgramId String
  accountNumber    String?
  lastActivityDate DateTime
  expirationDate   DateTime?
  isActive         Boolean        @default(true)
  notes            String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  loyaltyProgram   LoyaltyProgram @relation(fields: [loyaltyProgramId], references: [id], onDelete: Cascade)
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, loyaltyProgramId])
}

// Suggestions to update predefined catalog (cards/benefits) via user submissions and moderator review
model CatalogSuggestion {
  id           String            @id @default(cuid())
  type         SuggestionType
  status       SuggestionStatus  @default(PENDING)
  payloadJson  Json
  sources      String[]
  reviewNote   String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  createdById  String
  reviewedById String?
  exportedAt   DateTime?

  createdBy    User              @relation("UserCreatedSuggestions", fields: [createdById], references: [id], onDelete: Cascade)
  reviewedBy   User?             @relation("UserReviewedSuggestions", fields: [reviewedById], references: [id])
}

enum BenefitFrequency {
  MONTHLY
  QUARTERLY
  YEARLY
  ONE_TIME
}

enum BenefitCycleAlignment {
  CARD_ANNIVERSARY
  CALENDAR_FIXED
}

enum LoyaltyProgramType {
  AIRLINE
  HOTEL
  RENTAL_CAR
  CREDIT_CARD
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
}

enum SuggestionType {
  ADD_CARD
  EDIT_CARD
  ADD_BENEFIT
  EDIT_BENEFIT
  DEPRECATE_CARD
  DEPRECATE_BENEFIT
  IMAGE_UPDATE
}

enum SuggestionStatus {
  PENDING
  APPROVED
  REJECTED
}
