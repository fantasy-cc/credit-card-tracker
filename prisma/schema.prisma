generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "rhel-openssl-1.0.x", "rhel-openssl-3.0.x"]
  engineType    = "library"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String          @id @default(cuid())
  name                    String?
  email                   String          @unique
  emailVerified           DateTime?
  image                   String?
  notifyNewBenefit        Boolean         @default(false)
  notifyBenefitExpiration Boolean         @default(false)
  notifyExpirationDays    Int             @default(7)
  notifyPointsExpiration  Boolean?        @default(true)  // New optional field
  pointsExpirationDays    Int?            @default(30)    // New optional field
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  accounts                Account[]
  benefitStatuses         BenefitStatus[]
  creditCards             CreditCard[]
  sessions                Session[]
  loyaltyAccounts         LoyaltyAccount[] // New relation
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CreditCard {
  id             String    @id @default(cuid())
  name           String
  issuer         String
  cardNumber     String?
  lastFourDigits String?   // New field for last 4 digits identifier
  expiryDate     DateTime?
  openedDate     DateTime?
  userId         String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  benefits       Benefit[]
  user           User      @relation(fields: [userId], references: [id])
}

model Benefit {
  id                       String                 @id @default(cuid())
  category                 String
  description              String
  percentage               Float
  maxAmount                Float?
  startDate                DateTime
  endDate                  DateTime?
  frequency                BenefitFrequency       @default(ONE_TIME)
  creditCardId             String
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt
  cycleAlignment           BenefitCycleAlignment? @default(CARD_ANNIVERSARY)
  fixedCycleDurationMonths Int?
  fixedCycleStartMonth     Int?
  creditCard               CreditCard             @relation(fields: [creditCardId], references: [id], onDelete: Cascade)
  benefitStatuses          BenefitStatus[]
}

model PredefinedCard {
  id        String              @id @default(cuid())
  name      String              @unique
  issuer    String
  annualFee Float
  imageUrl  String?
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  benefits  PredefinedBenefit[]
}

model PredefinedBenefit {
  id                       String                 @id @default(cuid())
  category                 String
  description              String
  percentage               Float
  maxAmount                Float?
  frequency                BenefitFrequency       @default(ONE_TIME)
  predefinedCardId         String
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt
  cycleAlignment           BenefitCycleAlignment? @default(CARD_ANNIVERSARY)
  fixedCycleDurationMonths Int?
  fixedCycleStartMonth     Int?
  predefinedCard           PredefinedCard         @relation(fields: [predefinedCardId], references: [id])
}

model BenefitStatus {
  id             String    @id @default(cuid())
  benefitId      String
  userId         String
  cycleStartDate DateTime
  cycleEndDate   DateTime
  isCompleted    Boolean   @default(false)
  completedAt    DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  orderIndex     Int?
  benefit        Benefit   @relation(fields: [benefitId], references: [id], onDelete: Cascade)
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([benefitId, userId, cycleStartDate])
}

model playing_with_neon {
  id    Int    @id @default(autoincrement())
  name  String
  value Float? @db.Real
}

enum BenefitFrequency {
  MONTHLY
  QUARTERLY
  YEARLY
  ONE_TIME
}

enum BenefitCycleAlignment {
  CARD_ANNIVERSARY
  CALENDAR_FIXED
}

enum LoyaltyProgramType {
  AIRLINE
  HOTEL
  RENTAL_CAR
  CREDIT_CARD
}

// Predefined loyalty programs with their expiration policies
model LoyaltyProgram {
  id                    String              @id @default(cuid())
  name                  String              @unique // e.g., "marriott_bonvoy", "american_aadvantage"
  displayName           String              // e.g., "Marriott Bonvoy", "American Airlines AAdvantage"
  type                  LoyaltyProgramType
  company               String              // e.g., "Marriott", "American Airlines"
  expirationMonths      Int?                // Number of months after last activity (null = no expiration)
  hasExpiration         Boolean             @default(true) // False for programs like Delta, United
  website               String?
  logoUrl               String?
  description           String?             // Brief description of expiration policy
  qualifyingActivities  String?             // Detailed list of activities that reset expiration (JSON array format)
  
  // User accounts linked to this program
  userAccounts          LoyaltyAccount[]
  
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

// User's individual loyalty program accounts
model LoyaltyAccount {
  id                    String              @id @default(cuid())
  
  // Relationships
  userId                String
  user                  User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  loyaltyProgramId      String
  loyaltyProgram        LoyaltyProgram      @relation(fields: [loyaltyProgramId], references: [id], onDelete: Cascade)
  
  // Account details
  accountNumber         String?             // Optional account/member number
  lastActivityDate      DateTime            // When user last had activity (earning/redeeming)
  expirationDate        DateTime?           // Calculated expiration date (null if no expiration)
  isActive              Boolean             @default(true)
  notes                 String?             // User notes about this account
  
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  
  @@unique([userId, loyaltyProgramId]) // One account per user per program
}
